{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ganji\\\\Desktop\\\\cs460-smart-plant-system\\\\src\\\\components\\\\Charts\\\\LiveChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { StreamingPlugin, RealTimeScale } from 'chartjs-plugin-streaming';\nimport { io } from \"socket.io-client\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(\n// CategoryScale,\n// LinearScale,\n// PointElement,\n// LineElement,\n// Title,\n// Tooltip,\n// Legend,\n// TimeScale,\n// RealTimeScale,\nStreamingPlugin);\nconst test = [];\nconst LiveChart = _ref => {\n  _s();\n  let {\n    getdata\n  } = _ref;\n  const [data, setData] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const options = {\n    plugins: {\n      streaming: {\n        frameRate: 120\n      }\n    },\n    scales: {\n      x: {\n        type: 'realtime',\n        duration: 40000,\n        refresh: 1000,\n        delay: 2000,\n        realtime: {\n          onRefresh: chart => {\n            var current = test;\n            current.push({\n              x: Date.now(),\n              y: Math.random()\n            });\n            // maybe can set state for this whichever is smoother\n            // setData(current)\n            chart.data.datasets[0].data = current;\n            console.log(data.length);\n          }\n        }\n      },\n      y: {\n        // type: 'linear',\n        // display: true,\n        // position: 'left',\n        // min: 0,\n        max: 1,\n        // stepSize: 1,\n        beginAtZero: true\n      }\n    }\n  };\n  // useEffect(() => {\n  //   const socket = io(\"http://192.168.68.63:8089/\", {\n  //     transports: [\"websocket\"],\n  //     cors: {\n  //       origin: \"http://localhost:3000/\",\n  //     },\n  //   });\n  //   console.log(socket);\n  //   socket.on(\"data\", (data) => {\n  //     setMessages([...messages, data.data]);\n  //   });\n  // }, [socket, messages]);\n\n  const chartdata = {\n    datasets: [{\n      label: \"Dataset 1\",\n      data: [],\n      label: 'Moisture Level %',\n      borderColor: 'rgb(255, 99, 132)',\n      backgroundColor: 'rgba(255, 99, 132, 0.5)',\n      yAxisID: 'y'\n    }]\n  };\n  useEffect(() => {}, [getdata]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(LiveChart, \"MSKWkPczmpcqNLP0BAE12UrFyhM=\");\n_c = LiveChart;\nexport default LiveChart;\nvar _c;\n$RefreshReg$(_c, \"LiveChart\");","map":{"version":3,"names":["React","useEffect","useState","StreamingPlugin","RealTimeScale","io","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","Line","jsxDEV","_jsxDEV","register","test","LiveChart","_ref","_s","getdata","data","setData","message","setMessage","messages","setMessages","options","plugins","streaming","frameRate","scales","x","type","duration","refresh","delay","realtime","onRefresh","chart","current","push","Date","now","y","Math","random","datasets","console","log","length","max","beginAtZero","chartdata","label","borderColor","backgroundColor","yAxisID","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ganji/Desktop/cs460-smart-plant-system/src/components/Charts/LiveChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { StreamingPlugin, RealTimeScale } from 'chartjs-plugin-streaming';\r\nimport { io } from \"socket.io-client\";\r\n\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  TimeScale,\r\n} from 'chart.js';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\n\r\nChartJS.register(\r\n  // CategoryScale,\r\n  // LinearScale,\r\n  // PointElement,\r\n  // LineElement,\r\n  // Title,\r\n  // Tooltip,\r\n  // Legend,\r\n  // TimeScale,\r\n  // RealTimeScale,\r\n  StreamingPlugin\r\n);\r\n\r\nconst test = []\r\n\r\nconst LiveChart = ({ getdata }) => {\r\n  const [data, setData] = useState([]);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const options = {\r\n    plugins: {\r\n      streaming: {\r\n        frameRate: 120  \r\n      }\r\n    },\r\n    scales: {\r\n      x: {\r\n        type: 'realtime',\r\n        duration: 40000,\r\n        refresh: 1000,\r\n        delay: 2000,\r\n        realtime: {\r\n          onRefresh: chart => {\r\n            var current = test;\r\n            current.push({\r\n                  x: Date.now(),\r\n                  y: Math.random()\r\n            })\r\n            // maybe can set state for this whichever is smoother\r\n            // setData(current)\r\n            chart.data.datasets[0].data = current;\r\n            console.log(data.length);\r\n          }\r\n        }\r\n      },\r\n      y: {\r\n        // type: 'linear',\r\n        // display: true,\r\n        // position: 'left',\r\n        // min: 0,\r\n        max: 1,\r\n        // stepSize: 1,\r\n        beginAtZero: true,\r\n      },\r\n    },\r\n  };\r\n  // useEffect(() => {\r\n  //   const socket = io(\"http://192.168.68.63:8089/\", {\r\n  //     transports: [\"websocket\"],\r\n  //     cors: {\r\n  //       origin: \"http://localhost:3000/\",\r\n  //     },\r\n  //   });\r\n  //   console.log(socket);\r\n  //   socket.on(\"data\", (data) => {\r\n  //     setMessages([...messages, data.data]);\r\n  //   });\r\n  // }, [socket, messages]);\r\n  \r\n  const chartdata = {\r\n    datasets: [\r\n      {\r\n        label: \"Dataset 1\",\r\n        data: [],\r\n        label: 'Moisture Level %',\r\n        borderColor: 'rgb(255, 99, 132)',\r\n        backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n        yAxisID: 'y',\r\n      },\r\n    ],\r\n  };\r\n\r\n  useEffect(() => {\r\n\r\n  }, [getdata])\r\n  return (\r\n    <div>\r\n      {/* <Line options={options} data={chartdata} /> */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LiveChart"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,eAAe,EAAEC,aAAa,QAAQ,0BAA0B;AACzE,SAASC,EAAE,QAAQ,kBAAkB;AAErC,SACEC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,EACNC,SAAS,QACJ,UAAU;AACjB,SAASC,IAAI,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGvCX,OAAO,CAACY,QAAQ;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAhB,eAAe,CAChB;AAED,MAAMiB,IAAI,GAAG,EAAE;AAEf,MAAMC,SAAS,GAAGC,IAAA,IAAiB;EAAAC,EAAA;EAAA,IAAhB;IAAEC;EAAQ,CAAC,GAAAF,IAAA;EAC5B,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACyB,OAAO,EAAEC,UAAU,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAAC2B,QAAQ,EAAEC,WAAW,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM6B,OAAO,GAAG;IACdC,OAAO,EAAE;MACPC,SAAS,EAAE;QACTC,SAAS,EAAE;MACb;IACF,CAAC;IACDC,MAAM,EAAE;MACNC,CAAC,EAAE;QACDC,IAAI,EAAE,UAAU;QAChBC,QAAQ,EAAE,KAAK;QACfC,OAAO,EAAE,IAAI;QACbC,KAAK,EAAE,IAAI;QACXC,QAAQ,EAAE;UACRC,SAAS,EAAEC,KAAK,IAAI;YAClB,IAAIC,OAAO,GAAGxB,IAAI;YAClBwB,OAAO,CAACC,IAAI,CAAC;cACPT,CAAC,EAAEU,IAAI,CAACC,GAAG,EAAE;cACbC,CAAC,EAAEC,IAAI,CAACC,MAAM;YACpB,CAAC,CAAC;YACF;YACA;YACAP,KAAK,CAAClB,IAAI,CAAC0B,QAAQ,CAAC,CAAC,CAAC,CAAC1B,IAAI,GAAGmB,OAAO;YACrCQ,OAAO,CAACC,GAAG,CAAC5B,IAAI,CAAC6B,MAAM,CAAC;UAC1B;QACF;MACF,CAAC;MACDN,CAAC,EAAE;QACD;QACA;QACA;QACA;QACAO,GAAG,EAAE,CAAC;QACN;QACAC,WAAW,EAAE;MACf;IACF;EACF,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMC,SAAS,GAAG;IAChBN,QAAQ,EAAE,CACR;MACEO,KAAK,EAAE,WAAW;MAClBjC,IAAI,EAAE,EAAE;MACRiC,KAAK,EAAE,kBAAkB;MACzBC,WAAW,EAAE,mBAAmB;MAChCC,eAAe,EAAE,yBAAyB;MAC1CC,OAAO,EAAE;IACX,CAAC;EAEL,CAAC;EAED5D,SAAS,CAAC,MAAM,CAEhB,CAAC,EAAE,CAACuB,OAAO,CAAC,CAAC;EACb,oBACEN,OAAA;IAAA4C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEM;AAEV,CAAC;AAAA1C,EAAA,CA3EKF,SAAS;AAAA6C,EAAA,GAAT7C,SAAS;AA6Ef,eAAeA,SAAS;AAAA,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}