{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ganji\\\\Desktop\\\\cs460-smart-plant-system\\\\src\\\\components\\\\Charts\\\\MinuteChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport moment from 'moment/moment';\nimport 'chartjs-adapter-date-fns';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport { SunlightFormat, MoistureFormat, ReservoirFormat } from '../../Constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale);\nconst MinuteChart = () => {\n  _s();\n  const [labels, setLabels] = useState([]);\n  const [moisture, setMoisture] = useState([]);\n  const [sunlight, setSunlight] = useState([]);\n  const [maxY, setMaxY] = useState(0);\n  const [minY, setMinY] = useState(0);\n  const [data, setData] = useState([]);\n  const [error, setError] = useState(false);\n  const generateMinutes = () => {\n    const items = [];\n    new Array(24).fill().forEach((acc, index) => {\n      items.push(moment({\n        hour: index\n      }).format('h:mm A'));\n      items.push(moment({\n        hour: index,\n        minute: 15\n      }).format('h:mm A'));\n      items.push(moment({\n        hour: index,\n        minute: 30\n      }).format('h:mm A'));\n      items.push(moment({\n        hour: index,\n        minute: 45\n      }).format('h:mm A'));\n    });\n    return items;\n  };\n  const processData = data => {\n    const moisture = [];\n    const sunlight = [];\n    const today = moment().format('YYYY-MM-DD');\n    console.log(data);\n    // data.map((item) => {\n    //   const date = item[0].split(\" \")[0]\n    //   const minute = item[0].split(\" \")[1].split(\":\")[1]\n    //   if (date == today && (minute == '00' || minute == '30' || minute == '15') || minute == '45') {\n    //     moisture.push(MoistureFormat(JSON.parse(item[1])));\n    //     sunlight.push(SunlightFormat(JSON.parse(item[4])));\n    //   }\n    // })\n    setMoisture(moisture.reverse());\n    setSunlight(sunlight.reverse());\n    setMaxY(Math.floor(Math.max(...moisture, ...sunlight)));\n    setMinY(Math.floor(Math.min(...moisture, ...sunlight)));\n  };\n  const options = {\n    responsive: true,\n    interaction: {\n      mode: 'index',\n      intersect: false\n    },\n    stacked: false,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Moisture Level vs Sunlight Level (30 Minutes)'\n      }\n    },\n    scales: {\n      x: {\n        ticks: {\n          autoSkip: true,\n          maxTicksLimit: 24\n        }\n      },\n      y: {\n        type: 'linear',\n        display: true,\n        position: 'left',\n        min: minY - 5,\n        max: maxY + 5,\n        stepSize: 1,\n        title: {\n          display: true,\n          text: 'Moisture Level %'\n        }\n      },\n      y1: {\n        type: 'linear',\n        display: true,\n        position: 'right',\n        min: minY - 5,\n        max: maxY + 5,\n        stepSize: 1,\n        grid: {\n          drawOnChartArea: false\n        },\n        title: {\n          display: true,\n          text: 'Sunlight Level'\n        }\n      }\n    }\n  };\n  const chartdata = {\n    labels,\n    datasets: [{\n      label: 'Moisture Level %',\n      data: moisture,\n      borderColor: 'rgb(255, 99, 132)',\n      backgroundColor: 'rgba(255, 99, 132, 0.5)',\n      yAxisID: 'y'\n    }, {\n      label: 'Sunlight Level',\n      data: sunlight,\n      borderColor: 'rgb(53, 162, 235)',\n      backgroundColor: 'rgba(53, 162, 235, 0.5)',\n      yAxisID: 'y1'\n    }]\n  };\n  const getData = async () => {\n    try {\n      const res = await fetch(\"http://192.168.68.63:8088/getalldata\");\n      const result = await res.json();\n      setData(result);\n      setError(false);\n    } catch (err) {\n      setError(true);\n    }\n  };\n  useEffect(() => {\n    getData();\n    // calls api every 1 minute\n    setInterval(getData, 1 * 60 * 1000);\n  }, []);\n  useEffect(() => {\n    setLabels(generateMinutes());\n    if (data != []) {\n      processData(data);\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"ERROR \\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Could not connect to server\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 16\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        options: options,\n        data: chartdata\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(MinuteChart, \"TRRFnfAZHH1YMO+VnK7z9eaUDj8=\");\n_c = MinuteChart;\nexport default MinuteChart;\nvar _c;\n$RefreshReg$(_c, \"MinuteChart\");","map":{"version":3,"names":["React","useEffect","useState","moment","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","Line","SunlightFormat","MoistureFormat","ReservoirFormat","jsxDEV","_jsxDEV","Fragment","_Fragment","register","MinuteChart","_s","labels","setLabels","moisture","setMoisture","sunlight","setSunlight","maxY","setMaxY","minY","setMinY","data","setData","error","setError","generateMinutes","items","Array","fill","forEach","acc","index","push","hour","format","minute","processData","today","console","log","reverse","Math","floor","max","min","options","responsive","interaction","mode","intersect","stacked","plugins","title","display","text","scales","x","ticks","autoSkip","maxTicksLimit","y","type","position","stepSize","y1","grid","drawOnChartArea","chartdata","datasets","label","borderColor","backgroundColor","yAxisID","getData","res","fetch","result","json","err","setInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ganji/Desktop/cs460-smart-plant-system/src/components/Charts/MinuteChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport moment from 'moment/moment';\r\nimport 'chartjs-adapter-date-fns';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  TimeScale\r\n} from 'chart.js';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nimport {\r\n  SunlightFormat,\r\n  MoistureFormat,\r\n  ReservoirFormat\r\n} from '../../Constants';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  TimeScale\r\n);\r\n\r\n\r\n\r\nconst MinuteChart = () => {\r\n  const [labels, setLabels] = useState([]);\r\n  const [moisture, setMoisture] = useState([]);\r\n  const [sunlight, setSunlight] = useState([]);\r\n  const [maxY, setMaxY] = useState(0);\r\n  const [minY, setMinY] = useState(0);\r\n  const [data, setData] = useState([]);\r\n  const [error, setError] = useState(false);\r\n\r\n  const generateMinutes = () => {\r\n    const items = [];\r\n    new Array(24).fill().forEach((acc, index) => {\r\n      items.push(moment({ hour: index }).format('h:mm A'));\r\n      items.push(moment({ hour: index, minute: 15 }).format('h:mm A'));\r\n      items.push(moment({ hour: index, minute: 30 }).format('h:mm A'));\r\n      items.push(moment({ hour: index, minute: 45 }).format('h:mm A'));\r\n    })\r\n    return items;\r\n  }\r\n\r\n  const processData = (data) => {\r\n    const moisture = [];\r\n    const sunlight = [];\r\n    const today = moment().format('YYYY-MM-DD');\r\n    console.log(data);\r\n    // data.map((item) => {\r\n    //   const date = item[0].split(\" \")[0]\r\n    //   const minute = item[0].split(\" \")[1].split(\":\")[1]\r\n    //   if (date == today && (minute == '00' || minute == '30' || minute == '15') || minute == '45') {\r\n    //     moisture.push(MoistureFormat(JSON.parse(item[1])));\r\n    //     sunlight.push(SunlightFormat(JSON.parse(item[4])));\r\n    //   }\r\n    // })\r\n    setMoisture(moisture.reverse());\r\n    setSunlight(sunlight.reverse());\r\n    setMaxY(Math.floor(Math.max(...moisture, ...sunlight)));\r\n    setMinY(Math.floor(Math.min(...moisture, ...sunlight)));\r\n\r\n  }\r\n  const options = {\r\n    responsive: true,\r\n    interaction: {\r\n      mode: 'index',\r\n      intersect: false,\r\n    },\r\n    stacked: false,\r\n    plugins: {\r\n      title: {\r\n        display: true,\r\n        text: 'Moisture Level vs Sunlight Level (30 Minutes)',\r\n      },\r\n    },\r\n    scales: {\r\n      x: {\r\n        ticks: {\r\n          autoSkip: true,\r\n          maxTicksLimit: 24,\r\n        },\r\n      },\r\n      y: {\r\n        type: 'linear',\r\n        display: true,\r\n        position: 'left',\r\n        min: minY - 5,\r\n        max: maxY + 5,\r\n        stepSize: 1,\r\n        title: {\r\n          display: true,\r\n          text: 'Moisture Level %'\r\n        }\r\n      },\r\n      y1: {\r\n        type: 'linear',\r\n        display: true,\r\n        position: 'right',\r\n        min: minY - 5,\r\n        max: maxY + 5,\r\n        stepSize: 1,\r\n        grid: {\r\n          drawOnChartArea: false,\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: 'Sunlight Level'\r\n        }\r\n      },\r\n    },\r\n  };\r\n\r\n  const chartdata = {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        label: 'Moisture Level %',\r\n        data: moisture,\r\n        borderColor: 'rgb(255, 99, 132)',\r\n        backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n        yAxisID: 'y',\r\n      },\r\n      {\r\n        label: 'Sunlight Level',\r\n        data: sunlight,\r\n        borderColor: 'rgb(53, 162, 235)',\r\n        backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n        yAxisID: 'y1',\r\n      },\r\n    ],\r\n  };\r\n\r\n  const getData = async () => {\r\n\r\n    try {\r\n      const res = await fetch(\"http://192.168.68.63:8088/getalldata\")\r\n      const result = await res.json()\r\n      setData(result)\r\n      setError(false)\r\n    } catch (err) {\r\n      setError(true)\r\n    }\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    getData();\r\n    // calls api every 1 minute\r\n    setInterval(getData, 1 * 60 * 1000);\r\n  }, [])\r\n\r\n\r\n  useEffect(() => {\r\n    setLabels(generateMinutes());\r\n    if (data != []){\r\n      processData(data);\r\n    }\r\n  }, [data])\r\n\r\n  return (\r\n    <>\r\n      {error ? <div>\r\n        <h3>ERROR &rarr;</h3>\r\n        <p>Could not connect to server</p>\r\n      </div> :\r\n        <div>\r\n          <Line options={options} data={chartdata} />\r\n        </div>\r\n\r\n      }\r\n    </>\r\n  )\r\n\r\n}\r\n\r\nexport default MinuteChart"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}