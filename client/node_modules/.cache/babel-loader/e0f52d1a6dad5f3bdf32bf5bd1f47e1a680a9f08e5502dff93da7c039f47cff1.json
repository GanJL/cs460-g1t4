{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ganji\\\\Desktop\\\\cs460-smart-plant-system\\\\src\\\\components\\\\Charts\\\\MinuteChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport moment from 'moment/moment';\nimport 'chartjs-adapter-date-fns';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport { SunlightFormat, MoistureFormat, ReservoirFormat } from '../../Constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale);\nconst MinuteChart = _ref => {\n  _s();\n  let {\n    type\n  } = _ref;\n  const [labels, setLabels] = useState([]);\n  const [moisture, setMoisture] = useState([]);\n  const [sunlight, setSunlight] = useState([]);\n  const [temperature, setTemperature] = useState([]);\n  const [humidity, setHumidity] = useState([]);\n  const [reservoir, setReservoir] = useState([]);\n  const [maxY, setMaxY] = useState(0);\n  const [minY, setMinY] = useState(0);\n  const [data, setData] = useState([]);\n  const [error, setError] = useState(false);\n  const [minutes, setMinutes] = useState([]);\n  const generateLabels = () => {\n    const items = [];\n    new Array(24).fill().forEach((acc, index) => {\n      items.push(moment({\n        hour: index\n      }).format('h:mm A'));\n      items.push(moment({\n        hour: index,\n        minute: 15\n      }).format('h:mm A'));\n      items.push(moment({\n        hour: index,\n        minute: 30\n      }).format('h:mm A'));\n      items.push(moment({\n        hour: index,\n        minute: 45\n      }).format('h:mm A'));\n    });\n    // console.log(items);\n    return items;\n  };\n  const generateMinutes = () => {\n    const list = [];\n    new Array(24).fill().forEach((acc, index) => {\n      list.push(moment({\n        hour: index\n      }).format('H:mm'));\n      list.push(moment({\n        hour: index,\n        minute: 15\n      }).format('H:mm'));\n      list.push(moment({\n        hour: index,\n        minute: 30\n      }).format('H:mm'));\n      list.push(moment({\n        hour: index,\n        minute: 45\n      }).format('H:mm'));\n    });\n    setMinutes(list);\n  };\n  // ['11-03-2023 23:04:15', 0, 29, 77, 0, 0]\n  // const processData1 = (data) => {\n  //   // const moisture = [];\n  //   // const sunlight = [];\n  //   // const temperature = [];\n  //   // const humidity = [];\n  //   // const reservoir = [];\n\n  //   console.log(data);\n  //   // for (let i = 0; i < 24; i++) {\n  //   //   for (let j = 0; j < 60; j+15) {\n  //   //     console.log(i, j);\n  //   //     // data.map((item) => {\n  //   //     //   var date = item[0].split(\" \")[0]\n  //   //     //   var hour = item[0].split(\" \")[1].split(\":\")[0]\n  //   //     //   var minute = item[0].split(\" \")[1].split(\":\")[1]\n  //   //     //   var today = moment().format('DD-MM-YYYY');\n  //   //     //   if (i < 10) {\n  //   //     //     hour = `0${i}`\n  //   //     //   }\n  //   //     //   if (j == 0){\n  //   //     //     minute = `0${j}`\n  //   //     //   }\n  //   //     //   if (date == today && hour == i && minute == j) {\n  //   //     //     if (type == 'MS') {\n  //   //     //       moisture.push(MoistureFormat(JSON.parse(item[1])));\n  //   //     //       sunlight.push(SunlightFormat(JSON.parse(item[4])));\n  //   //     //     }\n  //   //     //     else if (type == 'TH') {\n  //   //     //       temperature.push(JSON.parse(item[2]));\n  //   //     //       humidity.push(JSON.parse(item[3]));\n  //   //     //     }\n  //   //     //     else {\n  //   //     //       reservoir.push(ReservoirFormat(JSON.parse(item[5])));\n  //   //     //       console.log(reservoir);\n  //   //     //     }\n  //   //     //   }\n  //   //     //   else {\n  //   //     //     if (type == 'MS') {\n  //   //     //       moisture.push(null);\n  //   //     //       sunlight.push(null);\n  //   //     //     }\n  //   //     //     else if (type == 'TH') {\n  //   //     //       temperature.push(null);\n  //   //     //       humidity.push(null);\n  //   //     //     }\n  //   //     //     else {\n  //   //     //       reservoir.push(null);\n  //   //     //     }\n  //   //     //   }\n\n  //   //     //   return null;\n  //   //     // })\n\n  //   //   }\n  //   // }\n\n  //   // if (type == 'MS') {\n  //   //   setMoisture(moisture.reverse());\n  //   //   setSunlight(sunlight.reverse());\n  //   //   setMaxY(Math.floor(Math.max(...moisture, ...sunlight)));\n  //   //   setMinY(Math.floor(Math.min(...moisture, ...sunlight)));\n  //   // }\n  //   // else if (type == 'TH') {\n  //   //   setTemperature(temperature.reverse());\n  //   //   setHumidity(humidity.reverse());\n  //   //   setMaxY(Math.floor(Math.max(...temperature, ...humidity)));\n  //   //   setMinY(Math.floor(Math.min(...temperature, ...humidity)));\n  //   // }\n  //   // else {\n  //   //   setReservoir(reservoir.reverse());\n  //   //   setMaxY(Math.floor(Math.max(...reservoir)));\n  //   //   setMinY(Math.floor(Math.min(...reservoir)));\n  //   // }\n  //   // console.log(moisture);\n  //   // console.log(sunlight);\n  //   // console.log(temperature);\n  //   // console.log(humidity);\n  //   // console.log(reservoir);\n\n  // }\n  // 22:45\n  const checkData = item => {\n    const date = item[0].split(\" \")[0];\n    const minute = item[0].split(\" \")[1].split(\":\")[1];\n    const hour = item[0].split(\" \")[1].split(\":\")[0];\n    const today = moment().format('DD-MM-YYYY');\n    if (today == date) {\n      minutes.map(min => {\n        const minHour = min.split(\":\")[0];\n        const minMinute = min.split(\":\")[1];\n        if (hour == minHour && minute == minMinute) {\n          return true;\n        }\n      });\n    }\n    return false;\n  };\n  const processData = data => {\n    const reversedData = data.reverse();\n    const moisture = [];\n    const sunlight = [];\n    const temperature = [];\n    const humidity = [];\n    const reservoir = [];\n    const today = moment().format('DD-MM-YYYY');\n    minutes.map(min => {\n      console.log(min);\n      // const date = item[0].split(\" \")[0]\n      // const minute = item[0].split(\" \")[1].split(\":\")[1]\n      // if (date == today && (minute == '00' || minute == '30' || minute == '15') || minute == '45') {\n      var minHour = min.split(\":\")[0];\n      if (minHour < 10) {\n        minHour = `0${minHour}`;\n      }\n      var minMinute = min.split(\":\")[1];\n      const filtered = reversedData.filter(item => {\n        // console.log(item);\n        const date = item[0].split(\" \")[0];\n        const minute = item[0].split(\" \")[1].split(\":\")[1];\n        const hour = item[0].split(\" \")[1].split(\":\")[0];\n        // console.log(date, minute, hour);\n        // console.log(hour,minHour,minute,minMinute,date,today);\n        return hour == minHour && minute == minMinute && date == today;\n      });\n      if (filtered.length > 0) {\n        if (type == 'MS') {\n          moisture.push(MoistureFormat(JSON.parse(filtered[0][1])));\n          sunlight.push(SunlightFormat(JSON.parse(filtered[0][4])));\n        } else if (type == 'TH') {\n          temperature.push(JSON.parse(filtered[0][2]));\n          humidity.push(JSON.parse(filtered[0][3]));\n        } else {\n          reservoir.push(ReservoirFormat(JSON.parse(filtered[0][5])));\n          console.log(reservoir);\n        }\n      } else {\n        if (type == 'MS') {\n          moisture.push(null);\n          sunlight.push(null);\n        } else if (type == 'TH') {\n          temperature.push(null);\n          humidity.push(null);\n        } else {\n          reservoir.push(null);\n        }\n      }\n    });\n    if (type == 'MS') {\n      setMoisture(moisture.reverse());\n      setSunlight(sunlight.reverse());\n      setMaxY(Math.floor(Math.max(...moisture, ...sunlight)));\n      setMinY(Math.floor(Math.min(...moisture, ...sunlight)));\n    } else if (type == 'TH') {\n      setTemperature(temperature.reverse());\n      setHumidity(humidity.reverse());\n      setMaxY(Math.floor(Math.max(...temperature, ...humidity)));\n      setMinY(Math.floor(Math.min(...temperature, ...humidity)));\n    } else {\n      setReservoir(reservoir.reverse());\n      setMaxY(Math.floor(Math.max(...reservoir)));\n      setMinY(Math.floor(Math.min(...reservoir)));\n    }\n  };\n  const options = type !== 'R' ? {\n    responsive: true,\n    interaction: {\n      mode: 'index',\n      intersect: false\n    },\n    stacked: false,\n    plugins: {\n      title: {\n        display: true,\n        text: type == 'MS' ? 'Moisture Level vs Sunlight Level (30 Minutes)' : 'Temperature Level vs Humidity Level (30 Minutes)'\n      }\n    },\n    scales: {\n      x: {\n        ticks: {\n          autoSkip: true,\n          maxTicksLimit: 24\n        }\n      },\n      y: {\n        type: 'linear',\n        display: true,\n        position: 'left',\n        min: minY - 5,\n        max: maxY + 5,\n        stepSize: 1,\n        title: {\n          display: true,\n          text: type == 'MS' ? 'Moisture Level %' : 'Temperature Level %'\n        }\n      },\n      y1: {\n        type: 'linear',\n        display: true,\n        position: 'right',\n        min: minY - 5,\n        max: maxY + 5,\n        stepSize: 1,\n        grid: {\n          drawOnChartArea: false\n        },\n        title: {\n          display: true,\n          text: type == 'MS' ? 'Sunlight Level %' : 'Humidity Level %'\n        }\n      }\n    }\n  } : {\n    responsive: true,\n    interaction: {\n      mode: 'index',\n      intersect: false\n    },\n    stacked: false,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Reservoir Level (30 Minutes)'\n      }\n    },\n    scales: {\n      x: {\n        ticks: {\n          autoSkip: true,\n          maxTicksLimit: 24\n        }\n      },\n      y: {\n        type: 'linear',\n        display: true,\n        position: 'left',\n        min: minY - 5,\n        max: maxY + 5,\n        stepSize: 1,\n        title: {\n          display: true,\n          text: 'Reservoir Level %'\n        }\n      }\n    }\n  };\n  const chartdata = type !== 'R' ? {\n    labels,\n    datasets: [{\n      label: type == 'MS' ? 'Moisture Level %' : 'Temperature Level %',\n      data: type == 'MS' ? moisture : temperature,\n      borderColor: 'rgb(255, 99, 132)',\n      backgroundColor: 'rgba(255, 99, 132, 0.5)',\n      yAxisID: 'y'\n    }, {\n      label: type == 'MS' ? 'Sunlight Level %' : 'Humidity Level %',\n      data: type == 'MS' ? sunlight : humidity,\n      borderColor: 'rgb(53, 162, 235)',\n      backgroundColor: 'rgba(53, 162, 235, 0.5)',\n      yAxisID: 'y1'\n    }]\n  } : {\n    labels,\n    datasets: [{\n      label: 'Reservoir Level %',\n      data: reservoir,\n      borderColor: 'rgb(255, 99, 132)',\n      backgroundColor: 'rgba(255, 99, 132, 0.5)',\n      yAxisID: 'y'\n    }]\n  };\n  const getData = async () => {\n    try {\n      const res = await fetch(\"http://192.168.68.63:8088/getalldata\");\n      const result = await res.json();\n      setData(result);\n      setError(false);\n    } catch (err) {\n      setError(true);\n    }\n  };\n  useEffect(() => {\n    getData();\n    // calls api every 1 minute\n    setInterval(getData, 1 * 60 * 1000);\n  }, [type]);\n  useEffect(() => {\n    setLabels(generateLabels());\n    generateMinutes();\n    if (data != []) {\n      processData(data);\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"ERROR \\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Could not connect to server\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 16\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        options: options,\n        data: chartdata\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(MinuteChart, \"B0vdTUM9Sie+ylpfb906zQdYssU=\");\n_c = MinuteChart;\nexport default MinuteChart;\nvar _c;\n$RefreshReg$(_c, \"MinuteChart\");","map":{"version":3,"names":["React","useEffect","useState","moment","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","Line","SunlightFormat","MoistureFormat","ReservoirFormat","jsxDEV","_jsxDEV","Fragment","_Fragment","register","MinuteChart","_ref","_s","type","labels","setLabels","moisture","setMoisture","sunlight","setSunlight","temperature","setTemperature","humidity","setHumidity","reservoir","setReservoir","maxY","setMaxY","minY","setMinY","data","setData","error","setError","minutes","setMinutes","generateLabels","items","Array","fill","forEach","acc","index","push","hour","format","minute","generateMinutes","list","checkData","item","date","split","today","map","min","minHour","minMinute","processData","reversedData","reverse","console","log","filtered","filter","length","JSON","parse","Math","floor","max","options","responsive","interaction","mode","intersect","stacked","plugins","title","display","text","scales","x","ticks","autoSkip","maxTicksLimit","y","position","stepSize","y1","grid","drawOnChartArea","chartdata","datasets","label","borderColor","backgroundColor","yAxisID","getData","res","fetch","result","json","err","setInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ganji/Desktop/cs460-smart-plant-system/src/components/Charts/MinuteChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport moment from 'moment/moment';\r\nimport 'chartjs-adapter-date-fns';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  TimeScale\r\n} from 'chart.js';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nimport {\r\n  SunlightFormat,\r\n  MoistureFormat,\r\n  ReservoirFormat\r\n} from '../../Constants';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  TimeScale\r\n);\r\n\r\n\r\n\r\nconst MinuteChart = ({ type }) => {\r\n  const [labels, setLabels] = useState([]);\r\n  const [moisture, setMoisture] = useState([]);\r\n  const [sunlight, setSunlight] = useState([]);\r\n  const [temperature, setTemperature] = useState([]);\r\n  const [humidity, setHumidity] = useState([]);\r\n  const [reservoir, setReservoir] = useState([]);\r\n  const [maxY, setMaxY] = useState(0);\r\n  const [minY, setMinY] = useState(0);\r\n  const [data, setData] = useState([]);\r\n  const [error, setError] = useState(false);\r\n  const [minutes, setMinutes] = useState([]);\r\n\r\n  const generateLabels = () => {\r\n    const items = [];\r\n    new Array(24).fill().forEach((acc, index) => {\r\n      items.push(moment({ hour: index }).format('h:mm A'));\r\n      items.push(moment({ hour: index, minute: 15 }).format('h:mm A'));\r\n      items.push(moment({ hour: index, minute: 30 }).format('h:mm A'));\r\n      items.push(moment({ hour: index, minute: 45 }).format('h:mm A'));\r\n    })\r\n    // console.log(items);\r\n    return items;\r\n  }\r\n\r\n  const generateMinutes = () => {\r\n    const list = []\r\n    new Array(24).fill().forEach((acc, index) => {\r\n      list.push(moment({ hour: index }).format('H:mm'));\r\n      list.push(moment({ hour: index, minute: 15 }).format('H:mm'));\r\n      list.push(moment({ hour: index, minute: 30 }).format('H:mm'));\r\n      list.push(moment({ hour: index, minute: 45 }).format('H:mm'));\r\n    })\r\n\r\n    setMinutes(list)\r\n  }\r\n  // ['11-03-2023 23:04:15', 0, 29, 77, 0, 0]\r\n  // const processData1 = (data) => {\r\n  //   // const moisture = [];\r\n  //   // const sunlight = [];\r\n  //   // const temperature = [];\r\n  //   // const humidity = [];\r\n  //   // const reservoir = [];\r\n\r\n  //   console.log(data);\r\n  //   // for (let i = 0; i < 24; i++) {\r\n  //   //   for (let j = 0; j < 60; j+15) {\r\n  //   //     console.log(i, j);\r\n  //   //     // data.map((item) => {\r\n  //   //     //   var date = item[0].split(\" \")[0]\r\n  //   //     //   var hour = item[0].split(\" \")[1].split(\":\")[0]\r\n  //   //     //   var minute = item[0].split(\" \")[1].split(\":\")[1]\r\n  //   //     //   var today = moment().format('DD-MM-YYYY');\r\n  //   //     //   if (i < 10) {\r\n  //   //     //     hour = `0${i}`\r\n  //   //     //   }\r\n  //   //     //   if (j == 0){\r\n  //   //     //     minute = `0${j}`\r\n  //   //     //   }\r\n  //   //     //   if (date == today && hour == i && minute == j) {\r\n  //   //     //     if (type == 'MS') {\r\n  //   //     //       moisture.push(MoistureFormat(JSON.parse(item[1])));\r\n  //   //     //       sunlight.push(SunlightFormat(JSON.parse(item[4])));\r\n  //   //     //     }\r\n  //   //     //     else if (type == 'TH') {\r\n  //   //     //       temperature.push(JSON.parse(item[2]));\r\n  //   //     //       humidity.push(JSON.parse(item[3]));\r\n  //   //     //     }\r\n  //   //     //     else {\r\n  //   //     //       reservoir.push(ReservoirFormat(JSON.parse(item[5])));\r\n  //   //     //       console.log(reservoir);\r\n  //   //     //     }\r\n  //   //     //   }\r\n  //   //     //   else {\r\n  //   //     //     if (type == 'MS') {\r\n  //   //     //       moisture.push(null);\r\n  //   //     //       sunlight.push(null);\r\n  //   //     //     }\r\n  //   //     //     else if (type == 'TH') {\r\n  //   //     //       temperature.push(null);\r\n  //   //     //       humidity.push(null);\r\n  //   //     //     }\r\n  //   //     //     else {\r\n  //   //     //       reservoir.push(null);\r\n  //   //     //     }\r\n  //   //     //   }\r\n\r\n  //   //     //   return null;\r\n  //   //     // })\r\n\r\n  //   //   }\r\n  //   // }\r\n\r\n  //   // if (type == 'MS') {\r\n  //   //   setMoisture(moisture.reverse());\r\n  //   //   setSunlight(sunlight.reverse());\r\n  //   //   setMaxY(Math.floor(Math.max(...moisture, ...sunlight)));\r\n  //   //   setMinY(Math.floor(Math.min(...moisture, ...sunlight)));\r\n  //   // }\r\n  //   // else if (type == 'TH') {\r\n  //   //   setTemperature(temperature.reverse());\r\n  //   //   setHumidity(humidity.reverse());\r\n  //   //   setMaxY(Math.floor(Math.max(...temperature, ...humidity)));\r\n  //   //   setMinY(Math.floor(Math.min(...temperature, ...humidity)));\r\n  //   // }\r\n  //   // else {\r\n  //   //   setReservoir(reservoir.reverse());\r\n  //   //   setMaxY(Math.floor(Math.max(...reservoir)));\r\n  //   //   setMinY(Math.floor(Math.min(...reservoir)));\r\n  //   // }\r\n  //   // console.log(moisture);\r\n  //   // console.log(sunlight);\r\n  //   // console.log(temperature);\r\n  //   // console.log(humidity);\r\n  //   // console.log(reservoir);\r\n\r\n  // }\r\n  // 22:45\r\n  const checkData = (item) => {\r\n    const date = item[0].split(\" \")[0]\r\n    const minute = item[0].split(\" \")[1].split(\":\")[1]\r\n    const hour = item[0].split(\" \")[1].split(\":\")[0]\r\n    const today = moment().format('DD-MM-YYYY');\r\n    if (today == date) {\r\n      minutes.map((min) => {\r\n        const minHour = min.split(\":\")[0]\r\n        const minMinute = min.split(\":\")[1]\r\n        if (hour == minHour && minute == minMinute) {\r\n          return true\r\n        }\r\n      })\r\n    }\r\n    return false\r\n  }\r\n\r\n  const processData = (data) => {\r\n    const reversedData = data.reverse()\r\n    const moisture = [];\r\n    const sunlight = [];\r\n    const temperature = [];\r\n    const humidity = [];\r\n    const reservoir = [];\r\n\r\n    const today = moment().format('DD-MM-YYYY');\r\n    minutes.map((min) => {\r\n      console.log(min);\r\n      // const date = item[0].split(\" \")[0]\r\n      // const minute = item[0].split(\" \")[1].split(\":\")[1]\r\n      // if (date == today && (minute == '00' || minute == '30' || minute == '15') || minute == '45') {\r\n      var minHour = min.split(\":\")[0]\r\n      if (minHour < 10) {\r\n        minHour = `0${minHour}`\r\n      }\r\n      var minMinute = min.split(\":\")[1]\r\n\r\n      const filtered = reversedData.filter((item) => {\r\n        // console.log(item);\r\n        const date = item[0].split(\" \")[0]\r\n        const minute = item[0].split(\" \")[1].split(\":\")[1]\r\n        const hour = item[0].split(\" \")[1].split(\":\")[0]\r\n        // console.log(date, minute, hour);\r\n        // console.log(hour,minHour,minute,minMinute,date,today);\r\n        return hour == minHour && minute == minMinute && date == today\r\n\r\n      })\r\n      if (filtered.length > 0) {\r\n        if (type == 'MS') {\r\n          moisture.push(MoistureFormat(JSON.parse(filtered[0][1])));\r\n          sunlight.push(SunlightFormat(JSON.parse(filtered[0][4])));\r\n        }\r\n        else if (type == 'TH') {\r\n          temperature.push(JSON.parse(filtered[0][2]));\r\n          humidity.push(JSON.parse(filtered[0][3]));\r\n        }\r\n        else {\r\n          reservoir.push(ReservoirFormat(JSON.parse(filtered[0][5])));\r\n          console.log(reservoir);\r\n        }\r\n      }\r\n      else {\r\n        if (type == 'MS') {\r\n          moisture.push(null);\r\n          sunlight.push(null);\r\n        }\r\n        else if (type == 'TH') {\r\n          temperature.push(null);\r\n          humidity.push(null);\r\n        }\r\n        else {\r\n          reservoir.push(null);\r\n        }\r\n      }\r\n    })\r\n    if (type == 'MS') {\r\n      setMoisture(moisture.reverse());\r\n      setSunlight(sunlight.reverse());\r\n      setMaxY(Math.floor(Math.max(...moisture, ...sunlight)));\r\n      setMinY(Math.floor(Math.min(...moisture, ...sunlight)));\r\n    }\r\n    else if (type == 'TH') {\r\n      setTemperature(temperature.reverse());\r\n      setHumidity(humidity.reverse());\r\n      setMaxY(Math.floor(Math.max(...temperature, ...humidity)));\r\n      setMinY(Math.floor(Math.min(...temperature, ...humidity)));\r\n    }\r\n    else {\r\n      setReservoir(reservoir.reverse());\r\n      setMaxY(Math.floor(Math.max(...reservoir)));\r\n      setMinY(Math.floor(Math.min(...reservoir)));\r\n    }\r\n\r\n  }\r\n  const options = type !== 'R' ? {\r\n    responsive: true,\r\n    interaction: {\r\n      mode: 'index',\r\n      intersect: false,\r\n    },\r\n    stacked: false,\r\n    plugins: {\r\n      title: {\r\n        display: true,\r\n        text: type == 'MS' ? 'Moisture Level vs Sunlight Level (30 Minutes)' : 'Temperature Level vs Humidity Level (30 Minutes)',\r\n      },\r\n    },\r\n    scales: {\r\n      x: {\r\n        ticks: {\r\n          autoSkip: true,\r\n          maxTicksLimit: 24,\r\n        },\r\n      },\r\n      y: {\r\n        type: 'linear',\r\n        display: true,\r\n        position: 'left',\r\n        min: minY - 5,\r\n        max: maxY + 5,\r\n        stepSize: 1,\r\n        title: {\r\n          display: true,\r\n          text: type == 'MS' ? 'Moisture Level %' : 'Temperature Level %',\r\n        }\r\n      },\r\n      y1: {\r\n        type: 'linear',\r\n        display: true,\r\n        position: 'right',\r\n        min: minY - 5,\r\n        max: maxY + 5,\r\n        stepSize: 1,\r\n        grid: {\r\n          drawOnChartArea: false,\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: type == 'MS' ? 'Sunlight Level %' : 'Humidity Level %',\r\n        }\r\n      },\r\n    },\r\n  } :\r\n    {\r\n      responsive: true,\r\n      interaction: {\r\n        mode: 'index',\r\n        intersect: false,\r\n      },\r\n      stacked: false,\r\n      plugins: {\r\n        title: {\r\n          display: true,\r\n          text: 'Reservoir Level (30 Minutes)',\r\n        },\r\n      },\r\n      scales: {\r\n        x: {\r\n          ticks: {\r\n            autoSkip: true,\r\n            maxTicksLimit: 24,\r\n          },\r\n        },\r\n        y: {\r\n          type: 'linear',\r\n          display: true,\r\n          position: 'left',\r\n          min: minY - 5,\r\n          max: maxY + 5,\r\n          stepSize: 1,\r\n          title: {\r\n            display: true,\r\n            text: 'Reservoir Level %',\r\n          }\r\n        },\r\n      },\r\n    };\r\n\r\n  const chartdata = type !== 'R' ? {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        label: type == 'MS' ? 'Moisture Level %' : 'Temperature Level %',\r\n        data: type == 'MS' ? moisture : temperature,\r\n        borderColor: 'rgb(255, 99, 132)',\r\n        backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n        yAxisID: 'y',\r\n      },\r\n      {\r\n        label: type == 'MS' ? 'Sunlight Level %' : 'Humidity Level %',\r\n        data: type == 'MS' ? sunlight : humidity,\r\n        borderColor: 'rgb(53, 162, 235)',\r\n        backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n        yAxisID: 'y1',\r\n      },\r\n    ],\r\n  } :\r\n    {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: 'Reservoir Level %',\r\n          data: reservoir,\r\n          borderColor: 'rgb(255, 99, 132)',\r\n          backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n          yAxisID: 'y',\r\n        },\r\n      ],\r\n    }\r\n    ;\r\n\r\n  const getData = async () => {\r\n\r\n    try {\r\n      const res = await fetch(\"http://192.168.68.63:8088/getalldata\")\r\n      const result = await res.json()\r\n      setData(result)\r\n      setError(false)\r\n    } catch (err) {\r\n      setError(true)\r\n    }\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    getData();\r\n    // calls api every 1 minute\r\n    setInterval(getData, 1 * 60 * 1000);\r\n  }, [type])\r\n\r\n\r\n  useEffect(() => {\r\n    setLabels(generateLabels());\r\n    generateMinutes()\r\n    if (data != []) {\r\n      processData(data);\r\n    }\r\n  }, [data])\r\n\r\n  return (\r\n    <>\r\n      {error ? <div>\r\n        <h3>ERROR &rarr;</h3>\r\n        <p>Could not connect to server</p>\r\n      </div> :\r\n        <div>\r\n          <Line options={options} data={chartdata} />\r\n        </div>\r\n\r\n      }\r\n    </>\r\n  )\r\n\r\n}\r\n\r\nexport default MinuteChart"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}